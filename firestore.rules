/**
 * @file Firestore Security Rules for Cosmic Orbit
 * @version Prototyping
 *
 * @description
 * This ruleset enforces a strict user-ownership model for user profiles stored
 * under the `/users/{userId}` collection.  Only the authenticated user matching
 * the `userId` in the path can read or write their own profile data. All writes
 * must be authenticated. The rules prioritize security and data privacy. Schema
 * validation is relaxed for rapid prototyping.
 *
 * @dataStructure
 * - `/users/{userId}`: Stores user profile information. The `userId` parameter
 *   must match the Firebase Auth UID of the requesting user.
 *
 * @keySecurityDecisions
 * - User profiles are private and accessible only to the authenticated user.
 * - Listing all users is explicitly denied.
 * - Schema validation is minimized for rapid prototyping.
 *
 * @denormalizationForAuthorization
 * - No denormalization is explicitly used at this level, but the design anticipates
 *   denormalization at the system/post level in future iterations. For example,
 *   a `members` map will be added to the `/systems/{systemId}/posts/{postId}`
 *   documents to manage permissions without requiring complex `get()` calls.
 *
 * @structuralSegregation
 * - User profiles are segregated under `/users/{userId}` to enforce strict
 *   ownership.  Future public content (e.g., posts) will be stored in top-level
 *   collections (e.g., `/systems/{systemId}/posts/{postId}`) to allow for public
 *   read access while maintaining owner-only write access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles. Only the authenticated user can read/write their profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates their profile at /users/user123.
     * @allow (get, update, delete) User with UID 'user123' reads/updates/deletes their profile at /users/user123.
     * @deny (create, get, update, delete) User with UID 'user456' attempts to access /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }
  }
}